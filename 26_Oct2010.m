clc;
clear;
close all;
%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/space/Desktop/Sadaf/Events/events/WLRT_2010-10-26_ALL.rt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/01/09 10:21:15

%% Initialize variables.
filename = '/home/space/Desktop/Sadaf/Events data/events/WLRT_2010-10-26_ALL.rt';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%11s%9s%8s%8s%8s%8s%8s%8s%5s%5s%4s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[3,4,5,6,7,8,9,10,11,12]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [3,4,5,6,7,8,9,10,11,12]);
rawCellColumns = raw(:, [1,2]);


%% Allocate imported array to column variable names
date = rawCellColumns(:, 1);
time = rawCellColumns(:, 2);
LON = cell2mat(rawNumericColumns(:, 1));
LAT = cell2mat(rawNumericColumns(:, 2));
ROT = cell2mat(rawNumericColumns(:, 3));
H = cell2mat(rawNumericColumns(:, 4));
ratio = cell2mat(rawNumericColumns(:, 5));
alpha = cell2mat(rawNumericColumns(:, 6));
GLEL = cell2mat(rawNumericColumns(:, 7));
OSRA = cell2mat(rawNumericColumns(:, 8));
NGE = cell2mat(rawNumericColumns(:, 9));
NBP = cell2mat(rawNumericColumns(:, 10));

%% Clear temporary variables
clearvars filename startRow date LON LAT ROT GLEL OSRA NGE NBP formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns;

%% Heliospheric distance
H ;   %Heliospheric distance
H_smooth= smooth(H)
plot(H)
hold on
plot(H_smooth)

k= ratio;
  
%% Area of the CME   

%To find height of the cone h and area of the cone Acone
h= (H_smooth.*(1-k).*(cos(alpha)))./(1+sin(alpha));

%Minor radius of the ellipse
b= h./cos(alpha);
rho= h.*tan(alpha);
R_bb= (k.*(b+rho))./(1-k.^2);

%Major radius of the ellipse
X_o= (rho+b.*k.^2)./(1-k.^2);
R= sqrt(X_o.^2 + (((b.^2.*k.^2)-(rho.^2))./(1-k.^2)));
R_aa= X_o + R;

%Area of the curved front
A_cf= pi.*R_aa.*R_bb;

%Total area
Acme1 = A_cf;

%% solar wind Density
solar_radius= 6.96*10^5; % in km
n_wind = 3.80;
n_H1= (n_wind/7.2).*(3.3*10^5*H.^(-2) + 4.1*10^6*H.^(-4) + 8*10^7*H.^(-6));

%% solar wind speed estimation
R0 = 1.5; % in terms of solar raius
Ra = 50; % in terms of solar radius
sw_velocity = 350; %c in km

y = exp(-(H_smooth-R0)./Ra);

V_sw1= sqrt(sw_velocity^2.*(1-y));

%%  mass of CME estimation
m0 = exp(15.2);        %true CME mass
delm = exp(14.7);      %mass increase with height 
hocc = 5.66; %radius of occultation

Mcme1 = m0 + delm.*(H_smooth - hocc);
   
%% mass of proton
mp = 1.67*10^(-31);   % In kg

%% kinematic viscosity of solar wind

%mean free path ( lambda) in km
lambda = (228./sqrt(n_H1));

%rms speed of solar wind protons
R_gc = 8.314;     %J/mol.K
T_i = 10^5;       % K
V_rms = sqrt(3*R_gc*T_i/mp);

v_sw = sqrt(6)*(2/15)*V_rms.*lambda;
%plot (He,v_sw);


%%  velocity calculations using two point formula
%CME velocity
H_delta = diff(H_smooth);

t = datenum(time);   %convert date time  to number matlab
tm=t(1:86,:); 
t_delta = diff(t)*24*60*60;

Vcme1 = (H_delta.*solar_radius)./t_delta;
plot (Vcme1);
acc= diff(Vcme1);
t_dd= t_delta(1:85,:);
a_d=acc./t_dd;
plot (a_d);

%% three point diff formula
%velocity calculation

[m,n]=size(H_smooth);
for i=2:m-1
 V_3point(i)=0.5*((((H_smooth(i+1)-H_smooth(i)))./((t(i+1)-t(i))))+(((H_smooth(i)-H_smooth(i-1)))./((t(i)-t(i-1)))))*(solar_radius/(24*60*60));
%H_5point(i)=(((1/12)*H(i-2))-((8/12)*H(i-1))+((8/12)*H(i+1))-((1/12)*H(i+2))).*solar_radius;
%t_5point(i)=(((1/12)*t(i-2))-((8/12)*t(i-1))+((8/12)*t(i+1))-((1/12)*t(i+2)))*24*60*60;
%V_5point=H_5point./t_5point;
end
V = V_3point';

V_smooth=smooth(V);
plot(V)
hold on 
plot(V_smooth)

%three point ACCELERATION
ac= diff(V_smooth);
ACC=ac./t_dd;
ACC_smooth=smooth(ACC);
plot(ACC)
hold on
plot(ACC_smooth)
 
 %% gamma calculation
 V_1= V_smooth(2:86,:);
 V_sw=V_sw1(2:86,:);
 gamma_3point=(ACC_smooth./((V_1-V_sw).*abs(V_1-V_sw)));   %% in km-1
 He=H_smooth(2:86,:);
 plot(He,gamma_3point);
 
 %% C_d calculation
Mcme=Mcme1(2:86,:);   %mass of cme
Acme=Acme1(2:86,:);   %making the dim same
n_H=n_H1(2:86,:);

C_d= (((gamma_3point.*Mcme)./(Acme.*n_H.*mp))./6.65^2).*10^(-25);                            
plot(He,C_d);



