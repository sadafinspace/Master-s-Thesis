clc;
clear;
close all;
%% Import data from text file.
% Script for importing data from the following text file:
%
%    /home/space/Desktop/Sadaf/Events/events/WLRT_2011-02-15_ALL.rt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/12/31 13:43:19

%% Initialize variables.
filename = '/home/space/Desktop/Sadaf/Events data/events/WLRT_2011-02-15_ALL.rt';
startRow = 2;

%% Format string for each line of text:
%   column1: text (%s)
%	column2: text (%s)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%11s%9s%8f%8f%8f%8f%8f%8f%5f%5f%4f%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
date = dataArray{:, 1};
TIME1 = dataArray{:, 2};
LON1 = dataArray{:, 3};
LAT1 = dataArray{:, 4};
ROT1 = dataArray{:, 5};
Height = dataArray{:, 6};
Aspectratio = dataArray{:, 7};
Halfangle = dataArray{:, 8};
GLEL = dataArray{:, 9};
OSRA = dataArray{:, 10};
NGE = dataArray{:, 11};
NBP = dataArray{:, 12};

%% Clear temporary variables
clearvars filename date LON1 LAT1 ROT1 GLEL OSRA NGE NBP startRow formatSpec fileID dataArray ans;

%% Heliospheric distance
H = Height ;   %Heliospheric distance
H_smooth= smooth(H)
plot(H)
hold on
plot(H_smooth)

k= Aspectratio;
alpha=Halfangle;
%% Area of the CME   

%To find height of the cone h and area of the cone Acone
h= (H.*(1-k).*(cos(alpha)))./(1+sin(alpha));

%Minor radius of the ellipse
b= h./cos(alpha);
rho= h.*tan(alpha);
R_bb= (k.*(b+rho))./(1-k.^2);

%Major radius of the ellipse
X_o= (rho+b.*k.^2)./(1-k.^2);
R= sqrt(X_o.^2 + (((b.^2.*k.^2)-(rho.^2))./(1-k.^2)));
R_aa= X_o + R;

%Area of the curved front
A_cf= pi.*R_aa.*R_bb;

%Total area
Acme1 = A_cf;

%% solar wind Density
solar_radius= 6.96*10^5; % in km
n_wind = 2.50;
n_H1= (n_wind/7.2).*(3.3*10^5*H_smooth.^(-2) + 4.1*10^6*H_smooth.^(-4) + 8*10^7*H_smooth.^(-6));

%% solar wind speed estimation
R0 = 1.5; % in terms of solar raius
Ra = 50; % in terms of solar radius
sw_velocity = 440; %c in km

y = exp(-(H_smooth-R0)./Ra);

V_sw1 = sqrt(sw_velocity^2.*(1-y));

%%  mass of CME estimation
m0 = exp(15.6);        %true CME mass
delm = exp(13.9);      %mass increase with height 
hocc = 3.85; %radius of occultation

Mcme1 = m0 + delm.*(H_smooth - hocc);
   
%% mass of proton
mp = 1.67*10^(-31);   % In kg

%% kinematic viscosity of solar wind

%mean free path ( lambda) in km
lambda = (228./sqrt(n_H1));

%rms speed of solar wind protons
R_gc = 8.314;     %J/mol.K
T_i = 10^5;       % K
V_rms = sqrt(3*R_gc*T_i/mp);

v_sw = sqrt(6)*(2/15)*V_rms.*lambda;
%plot (He,v_sw);


%%  velocity calculations using two point formula
%CME velocity
H_delta = diff(H_smooth);

t = datenum(TIME1);   %convert date time  to number matlab
tm=t(1:61,:); 
t_delta = diff(t)*24*60*60;

Vcme1 = (H_delta.*solar_radius)./t_delta;
plot (Vcme1);
acc= diff(Vcme1);
t_dd= t_delta(2:61,:);
a_d=acc./t_dd;
plot (a_d);



%% three point diff formula
%velocity calculation

[m,n]=size(H_smooth);
for i=2:m-1
 V_3point(i)=0.5*((((H_smooth(i+1)-H_smooth(i)))./((t(i+1)-t(i))))+(((H_smooth(i)-H_smooth(i-1)))./((t(i)-t(i-1)))))*(solar_radius/(24*60*60));
%H_5point(i)=(((1/12)*H(i-2))-((8/12)*H(i-1))+((8/12)*H(i+1))-((1/12)*H(i+2))).*solar_radius;
%t_5point(i)=(((1/12)*t(i-2))-((8/12)*t(i-1))+((8/12)*t(i+1))-((1/12)*t(i+2)))*24*60*60;
%V_5point=H_5point./t_5point;
end
V = V_3point';

V_smooth=smooth(V);
plot(V)
hold on 
plot(V_smooth)

%three point ACCELERATION
ac= diff(V_smooth);
ACC=ac./t_dd;
ACC_smooth=smooth(ACC);
plot(ACC)
hold on
plot(ACC_smooth)
 
 %% gamma calculation
 V_1= V_smooth(2:61,:);
 V_sw=V_sw1(2:61,:);
 gamma_3point=(ACC_smooth./((V_1-V_sw).*abs(V_1-V_sw)));   %% in km-1
 He=H_smooth(2:61,:);
 plot(He,gamma_3point);
 
 %% C_d calculation
Mcme=Mcme1(2:61,:);   %mass of cme
Acme=Acme1(2:61,:);   %making the dim same
n_H=n_H1(2:61,:);

C_d= (((gamma_3point.*Mcme)./(Acme.*n_H.*mp))./6.65^2).*10^(-25);                            
plot(He,C_d);



